import requests
import ssl
import socket
import subprocess
from urllib.parse import urlparse

# List of websites to check
websites = [
    "https://www.youtube.com",
    "https://www.google.com",
    "https://www.facebook.com",
]

def check_security(website):
    # Print a message indicating the start of security checks for the current website
    print(f"Checking security for {website}...\n")
    
    try:
        # Handle URL redirects and get the final URL
        response = requests.head(website, allow_redirects=True)
        final_url = response.url
        
        # Check CSP (Content Security Policy)
        csp_header = response.headers.get("Content-Security-Policy")
        if csp_header:
            print(f"CSP configured: {csp_header}")
        else:
            print("CSP not configured.")

        # Check HSTS (HTTP Strict Transport Security)
        hsts_header = response.headers.get("Strict-Transport-Security")
        if hsts_header:
            print(f"HSTS configured: {hsts_header}")
        else:
            print("HSTS not configured.")

        # Extract hostname from the URL
        parsed_url = urlparse(final_url)
        hostname = parsed_url.netloc

        # Check SSL certificate
        cert = ssl.get_server_certificate((hostname, 443))
        print(f"SSL certificate:\n{cert}")

        # Scan open ports using nmap (if nmap is available)
        try:
            ip = socket.gethostbyname(hostname)
            print(f"Scanning open ports on {ip} ({website})...")
            result = subprocess.check_output(['nmap', '-F', ip])
            print(result.decode('utf-8'))
        except FileNotFoundError:
            print("Nmap is not installed. Skipping port scanning.")
        
        print("\n--- Security check completed ---\n")

    except requests.exceptions.RequestException as e:
        # Handle any exceptions related to making HTTP requests
        print(f"Error connecting to {website}: {e}")
    except Exception as e:
        # Handle any other unexpected exceptions
        print(f"Error: {e}")

if __name__ == "__main__":
    for website in websites:
        check_security(website)  # Perform security checks for each website in the list
